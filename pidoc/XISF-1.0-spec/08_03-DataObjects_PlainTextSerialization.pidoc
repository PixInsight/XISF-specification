
\subsection { \label scalars_serializations Plain Text Serialization of Scalars } {

   Serializations of scalar values as plain text---for example, in XML attribute values---\e shall comply with the following rules:

   \subsection { Plain Text Serialization of Decimal Integers } {

      A serialization of a decimal (base 10) integer value as plain text \e shall satisfy the following regular expression:\ref ecmascript_regexp

      \block[marginleft:2em] \c {
         #:\s*[+-]?[1-9][0-9]*\s*:#
      }

      Examples:

      \block[marginleft:2em] \c {
         987\n
         -123\n
         +45678
      }
   }

   \subsection { Plain Text Serialization of Binary, Octal and Hexadecimal Integers } {

      Serializations of binary (base 2), octal (base 8) and hexadecimal (base 16) integer values as plain text \e shall satisfy the following regular expressions:\ref ecmascript_regexp

      Binary:\n
      \block[marginleft:2em] \c {
         #:\s*0[bB][0-1]+\s*:#
      }

      Octal:\n
      \block[marginleft:2em] \c {
         #:\s*0[oO][0-7]+\s*:#
      }

      Hexadecimal:\n
      \block[marginleft:2em] \c {
         #:\s*0[xX][0-9a-fA-F]+\s*:#
      }

      Examples:

      \block[marginleft:2em] \c {
         0b10100111100101\n
         0o570261\n
         0x80E950AB
      }

      In the first example, 10100111100101\sub{2} = 10725\sub{10}.

      In the second example, 570261\sub{8} = 192689\sub{10}.

      In the third example, if the represented value is a two's complement signed 32-bit integer, the value is 80E950AB\sub{16} = --2132193109\sub{10}. However, if the represented value is an unsigned integer, the value is 2162774187\sub{10}.
   }

   \subsection { \label floating_point_serializations Plain Text Serialization of Floating Point Values } {

      A serialization of a numeric floating point scalar as plain text, including IEEE 754\ref ieee_754 binary32, binary64 and binary128 formats, \e shall satisfy the following regular expression:\ref ecmascript_regexp

      \block[marginleft:2em] \c {
         #:\s*([-+]?(([0-9]+)?\.)?[0-9]+([eE][-+]?[0-9]+)?)|(NaN)|([-+]Inf)\s*:#
      }

      where the non-numeric IEEE 754 entities NaN (Not a Number), +\inf and --\inf are serialized as \c NaN, \c +Inf and \c -Inf, respectively.

      Examples:

      \block[marginleft:2em] \c {
         123\n
         123.456\n
         -123.456\n
         .123\n
         +.123\n
         NaN\n
         1e0\n
         -0.123e+02
      }
   }

   \subsection { White Space } {

      For textual serializations of all scalar types, leading and trailing white space (represented as the \\s character class in regular expressions) is irrelevant, \e should \e not be generated by encoders, and \e must be ignored by decoders.
   }
}
