
\subsection { \label xisf_property XISF Property } {

   An XISF property is an association of two data structures, \e identifier and \e value. A property \e may also have an \e optional associated \e {format specifier}, to control its representation as readable text, and an \e optional informative \e comment. An XISF property \e may be associated, either with an object stored in an \lref xisf_unit {XISF unit}, or with an XISF unit as a whole. An XISF property \e may also be stored in an XISF unit as a standalone object. Valid associations between properties and objects will be defined later in this document.

   \subsection { \label property_identifier Property Identifier } {

      A property identifier \e must be a sequence of one or more 8-bit ASCII characters\ref unicode_ascii_subset satisfying the following regular expression:\ref ecmascript_regexp

      \block[marginleft:2em] \c {
         #:[_a-zA-Z][_a-zA-Z0-9]*(:([_a-zA-Z][_a-zA-Z0-9])+)*:#
      }

      Examples:

      \block[marginleft:2em] \c {
         MyFirstProperty\n
         mySecondOne234\n
         _this_1_is_a_test\n
         Namespace:Property\n
         foo:bar:Foo2_Bar3
      }

      The colon separator (':', ASCII code point 58\sub{10} = 3A\sub{16}) \e may be used to organize a set of properties into customary groups known as \e namespaces. Namespaces can be useful to improve structuration of properties by defining logical and semantic categories.

      A property identifier \e must be unique for the object with which the property is associated. For example, all the properties of a given image must have unique identifiers, but two properties associated with different images may have the same identifier, or a property associated with the whole \lref xisf_unit {XISF unit} may have the same identifier as another property associated with an image, etc.

      There is no specific limit for the length of a property identifier.
   }

   \subsection { \label property_value Property Value } {

      A property value is a data object associated with a property identifier. A property value has a predefined \lref property_types {XISF property type}, which determines its structure and behavior.
   }

   \subsection { \label property_format_specifier Property Format Specifier } {

      A property format specifier \e may be associated with a property to control generation of readable plain text representations of the property value in a standardized way.

      A property format specifier is a list of one or more \e {format tokens} separated by semicolon ASCII characters (';', ASCII code point 59\sub{10} = 3B\sub{16}):

      \block[marginleft:2em] \c {
         \e{token}\sub{1};\e{token}\sub{2};...;\e{token}\sub{n}
      }

      White space is irrelevant in a property format specifier and \e must be ignored. The following format tokens are supported by this specification:

      \definition {

         \c { width:\e{count} }
         {
            \c\e count is a plain text representation of an unsigned integer. If the length \e n in characters of the represented value is less than the value of \c\e count, the represented value \e shall be padded with (\e n -- \c\e count) padding characters---see the \c fill token below. The location of padding characters depends on the current alignment---see the \c align token below.

            If no \c width token is specified, the value \e shall be represented using the minimum number of characters necessary, that is, no padding will be used by default.
         }

         \c { fill:\e{char} }
         {
            \c\e char is a single ASCII character that \e shall be used as a filling character for padded representations---see the \c width token above.

            When no \c fill token is specified, the default padding character \e shall be the ASCII space character (ASCII code point 32\sub{10} = 20\sub{16}).
         }

         \c { align:\e{mode} }
         {
            \c\e mode defines the \e alignment used for padded representations of all scalar types (see the \c width token above). \c\e mode \e must be one of:

            \definition {

               \c left
               {
                  Padding characters \e shall be appended at the end of the represented value.
               }

               \c right
               {
                  Padding characters \e shall be prepended at the beginning of the represented value.
               }

               \c center
               {
                  If the length \e n of the padding space is even, the same number \e{n}/2 of padding characters \e shall be prepended and appended at the beginning and the end of the represented value, respectively. If the padding length \e n is odd, \e{n}/2+1 padding characters \e shall be prepended at the beginning and \e{n}/2 padding characters \e shall be appended at the end of the represented value.
               }
            }

            When not specified, the default alignment \e shall be \c right, as described above.
         }

         \c { sign:\e{mode} }
         {
            \c\e mode defines how a sign character is used for representations of numeric values. \c\e mode \e must be one of:

            \definition {

               \c auto
               {
                  Either a minus sign ASCII character ('-', ASCII code point 45\sub{10} = 2D\sub{16}) or a Unicode minus sign character ('&#x2212;', U+2212) \e shall be prepended to a representation of a scalar if the represented value is less than zero. If the represented value is zero or greater than zero, a sign character \e shall \e not be prepended.
               }

               \c force
               {
                  Either a minus sign ASCII character ('-', ASCII code point 45\sub{10} = 2D\sub{16}) or a Unicode minus sign character ('&#x2212;', U+2212) \e shall be prepended to a representation of a scalar if the represented value is less than zero, and a plus sign ASCII character ('+', ASCII code point 43\sub{10} = 2B\sub{16}) \e shall be prepended if the value is greater than zero.
               }
            }

            In all cases, if the numeric value is being represented as zero (after a possible truncation or rounding operation), a sign character \e must \e not be prepended to the represented value.

            When not specified, the default \c sign \c\e mode \e shall be \c auto, as described above.

            A decoder \e must ignore the \c sign format token for representations of non-numeric values.
         }

         \c { precision:\e{count} }
         {
            \c\e count is a plain text representation of an unsigned integer, whose value is the \e precision of the representation of a floating point value. The precision \e shall be interpreted according to the current floating point mode (see the \c float token below):

            \list {
               { For a representation of a floating point scalar when the floating point mode is \c\e scientific or \c\e fixed, the precision is the minimum number of digits to appear after the decimal separator. }
               { For a representation of a floating point scalar when the floating point mode is \c\e auto, the precision is the maximum number of significant digits. }
            }

            The represented floating point scalar \e shall be rounded to the nearest value with the required number of decimal digits.

            If no \c precision token is specified, the default precision \e shall be 6.

            A decoder \e must ignore the \c precision format token for representations of non-numeric or integer numeric values.
         }

         \c { float:\e{mode} }
         {
            \c\e mode defines the \e {floating point mode} used for representations of floating point numeric scalars. \c\e mode \e must be one of:

            \definition {

               \c auto
               {
                  The floating point value \e shall be represented using \e {printf's 'g' mode}.\ref open_group_printf The floating-point value \e shall be represented in \c scientific or \c fixed floating point mode, depending on the value being converted and the current precision, to generate the shortest possible text representation.
               }

               \c scientific
               {
                  The floating point value \e shall be represented in exponential notation. Ignoring possible padding characters, the representation \e shall satisfy the following regular expression:\ref ecmascript_regexp

                  \block[marginleft:2em] \c {
                     #:[-+]?[0-9]+\.[0-9]+[eE][-+][0-9]+:#
                  }
               }

               \c fixed
               {
                  The floating point value \e shall be represented in fixed-point decimal notation. Ignoring possible padding characters, the representation \e shall satisfy the following regular expression:

                  \block[marginleft:2em] \c {
                     #:[-+]?[0-9]+(\.[0-9]+)?:#
                  }
               }
            }

            When not specified, the default floating point mode \e shall be \c auto, as described above.

            A decoder \e must ignore the \c float format token for representations of non-numeric or integer numeric values.
         }

         \c { bool:\e{mode} }
         {
            \c\e mode defines how Boolean values are represented. \c\e mode \e must be one of:

            \definition {

               \c alpha
               {
                  Boolean values \e shall be represented as the plain text words \c false and \c true.
               }

               \c numeric
               {
                  The integers \c 0 and \c 1 \e shall be used to represent the Boolean values false and true, respectively.
               }
            }

            When not specified, the default \c\e mode \e shall be \c alpha.

            A decoder \e must ignore the \c bool format token for representations of non-Boolean values.
         }

         \c { base:\e{radix} }
         {
            \c\e radix defines the numeric base for the representation of an integer value. \c\e radix \e must be one of:

            \definition {

               \c bin
               {
                  The integer value \e shall be represented as a binary number using exclusively the digits '0' and '1'.
               }

               \c oct
               {
                  The integer value \e shall be represented as an octal (base 8) number using the digits from '0' to '7'.
               }

               \c dec
               {
                  The integer value \e shall be represented as a decimal number using the digits from '0' to '9'.
               }

               \c hex
               {
                  The integer value \e shall be represented as an hexadecimal (base 16) number using the digits from '0' to '9' and from 'a' to 'f' to represent the numbers from 0 to 9 and from 10 to 15, respectively.
               }
            }

            When not specified, the default value of \c\e radix \e shall be \c dec, that is, decimal representations \e shall be generated for integer numbers by default.

            A decoder \e must ignore the \c base format token for representations of non-integer values.
         }

         \c { unit:\e{text} }
         {
            \c\e text is a Unicode text fragment that, if present, \e must represent the unit in which the property value is expressed. The multiplication, division and raise operators, '*', '/' and '^' respectively, can be used to represent units. For example:

            \block[marginleft:2em] \c {
               "unit:m/s"\n
               "unit:erg*s^−1*cm^2*Hz^−1"
            }

            In the second example the represented unit \e must be interpreted as \im {#: \hbox{erg} \cdot \hbox{s}^{-1} \cdot \hbox{cm}^{2} \cdot \hbox{Hz}^{-1} :#}.
         }
      }

      A decoder \e shall follow these rules to apply a format specifier to structured numeric properties:

      \list {
         { A format specifier applied to a \lref complex_property_types {complex property} \e shall apply to the individual complex and imaginary parts. }
         { A format specifier applied to a \lref vector_property_types {vector property} \e shall apply to all vector components. }
         { A format specifier applied to a \lref matrix_property_types {matrix property} \e shall apply to all matrix elements. }
      }

      For examples of property format specifiers, see the \lref property_core_element \c Property core element.

      \subsection { \label date_and_time_format Date and Time Format } {

         Property format specifiers are not applicable to \lref time_point_property_type TimePoint XISF properties. Representation of dates and times is left as implementation-defined in this version of the XISF specification.
      }
   }

   \subsection { \label property_types Property Types } {

      XISF property types are organized into seven categories: \e scalar, \e complex, \e string, \e {time point}, \e vector, \e matrix and \e table.

      \subsection { \label scalar_property_types Scalar Property Types } {

         A scalar is a single numeric value without internal structuration.

         \table[caption,header,width:100\%] {
            { XISF Scalar Property Types }
            { \nowrap{ Type name } \nowrap{ Alternate name } { Description } }
            { { \label boolean_property_type Boolean } {  } { An unsigned 8-bit integer representing one of the logical values \e false and \e true. The logical value \e false is represented by the integer value 0, and the logical value \e true is represented by the integer value 1. } }
            { { \label int8_property_type Int8 } {  } { A signed two's complement 8-bit integer. } }
            { { \label uint8_property_type UInt8 } { Byte } { An unsigned 8-bit integer. } }
            { { \label int16_property_type Int16 } { Short } { A signed two's complement 16-bit integer. } }
            { { \label uint16_property_type UInt16 } { UShort } { An unsigned 16-bit integer. } }
            { { \label int32_property_type Int32 } { Int } { A signed two's complement 32-bit integer. } }
            { { \label uint32_property_type UInt32 } { UInt } { An unsigned 32-bit integer. } }
            { { \label int64_property_type Int64 } {  } { A signed two's complement 64-bit integer. } }
            { { \label int128_property_type Int128 } {  } { A signed two's complement 128-bit integer. } }
            { { \label uint64_property_type UInt64 } {  } { An unsigned 64-bit integer. } }
            { { \label uint128_property_type UInt128 } {  } { An unsigned 128-bit integer. } }
            { { \label float32_property_type Float32 } { Float } { An IEEE 754\ref ieee_754 binary32 floating point value (single precision). } }
            { { \label float64_property_type Float64 } { Double } { An IEEE 754 binary64 floating point value (double precision). } }
            { { \label float128_property_type Float128 } { Quad } { An IEEE 754 binary128 floating point value (quadruple precision). } }
         }

         Support for 128-bit scalars is \e optional. Support for the rest of 8-bit, 16-bit, 32-bit and 64-bit scalars is \e required for all XISF encoders and decoders.
      }

      \subsection { \label complex_property_types Complex Property Types } {

         A complex number is a homogeneous, ordered sequence of two scalars:

         \list {
            { The two scalars that form a complex number are its \e components. }
            { The first component of a complex number is its \e {real part}. }
            { The second component of a complex number is its \e {imaginary part}. }
            { When serialized in binary form, a complex number \e shall be stored as two contiguous scalars. }
         }

         \table[caption,header,width:100\%] {
            { XISF Complex Property Types }
            { \nowrap{ Type name } \nowrap{ Alternate name } { Description } }
            { { \label complex32_property_type Complex32 } {  } { A complex number whose components are encoded as two \lref float32_property_type Float32 values. } }
            { { \label complex64_property_type Complex64 } { Complex } { A complex number whose components are encoded as two \lref float64_property_type Float64 values. } }
            { { \label complex128_property_type Complex128 } {  } { A complex number whose components are encoded as two \lref float128_property_type Float128 values. } }
         }

         Support for 128-bit complex numbers (Complex128) is \e optional. Support for 32-bit and 64-bit complex types is \e required for all XISF encoders and decoders claiming support for complex properties.
      }

      \subsection { \label string_property_type String Property Type } {

         A string is a homogeneous, ordered sequence of zero or more Unicode\ref unicode_standard code points encoded as unsigned integer scalars.

         \list {
            { The Unicode code points contained in a string are \e {string elements} or \e characters. }
            { The number of elements or characters in a string is the string's \e length. }
            { An \e {empty string} is a string with zero length. }
            { There is no specific limit for the length of a string. }
            { When serialized in binary form, a string \e shall be stored as a sequence of contiguous scalars. }
         }

         \table[caption,header,width:100\%] {
            { XISF String Property Type }
            { \nowrap{ Type name } \nowrap{ Alternate name } { Description } }
            { { String } {  } { A Unicode string encoded in UTF-8,\ref unicode_encoding_forms \ref unicode_encoding_schemes whose elements are \lref uint8_property_type UInt8 scalars. Can be also a sequence of characters in an 8-bit encoding compatible with Unicode, such as ASCII\ref unicode_ascii_subset or ISO/IEC 8859-1.\ref iso_iec_8859_1 } }
         }

         Strings \e shall use Unicode version 5.1 or later. All Unicode code point values from U+0001 to U+10FFFF, including surrogate code points, may occur in a string property. The Unicode code point U+0000 (nul control character) \e shall \e not occur in a string property.

         It must be pointed out that the length of a string is in general not the same as (and usually smaller than) the length in bytes of the data block required to store it. This happens because UTF-8 is a variable-length encoding scheme where a single code point may require from one to four bytes to be represented.
      }

      \subsection { \label time_point_property_type TimePoint Property Type } {

         In the context of this specification, a time point is an instant in the Coordinated Universal Time (UTC)\ref wikipedia_utc time scale.

         \table[caption,header,width:100\%] {
            { XISF Time Point Property Type }
            { \nowrap{ Type name } \nowrap{ Alternate name } { Description } }
            { { TimePoint } {  } { A time point encoded as an ASCII\ref unicode_ascii_subset string that \e shall comply with the ISO 8601 extended specification for representations of dates and times.\ref iso_8601 \ref rfc_3339 } }
         }

         In ISO 8601 extended representations of time points, decimal fractions \e shall be divided from integer parts \e exclusively by the full stop or dot character ('.', ASCII code point 46\sub{10} = 2E\sub{16}).

         A time zone \e should always be specified in a time point representation to eliminate any possible ambiguity about the difference of a time point representation with respect to UTC. If no time zone is specified in the ISO 8601 extended representation, the time point \e shall be assumed to be represented as UTC+0, that is, the Zulu time zone \e shall be assumed by default.

         TimePoint properties don't have a \lref property_format_specifier {property format specifier}. As \lref date_and_time_format {stated above}, representation of dates and times is left as implementation-defined in this version of the XISF specification.
      }

      \subsection { \label vector_property_types Vector Property Types } {

         A vector is a homogeneous, ordered sequence of zero or more scalars or complex numbers.

         \list {
            { The scalars or complex numbers contained in a vector are \e {vector components}. }
            { The number of components in a vector is the vector's \e length. }
            { An \e {empty vector} is a vector with zero length. }
            { A \e {vector index} is an integer number in the range \[0,N--1\], where N is the vector's length. }
            { A vector component \e must be randomly accessible by its corresponding vector index. }
            { There is no specific limit for the length of a vector. }
            { When serialized in binary form, a vector \e shall be stored as a sequence of contiguous scalars or complex numbers. }
         }

         \table[caption,header,width:100\%] {
            { XISF Vector Property Types }
            { \nowrap{ Type name } \nowrap{ Alternate name } { Description } }
            { { I8Vector } {  } { A vector whose components are \lref int8_property_type Int8 values. } }
            { { \label bytearray_property_type UI8Vector } { ByteArray } { A vector whose components are \lref uint8_property_type UInt8 values. } }
            { { I16Vector } {  } { A vector whose components are \lref int16_property_type Int16 values. } }
            { { UI16Vector } {  } { A vector whose components are \lref uint16_property_type UInt16 values. } }
            { { I32Vector } { IVector } { A vector whose components are \lref int32_property_type Int32 values. } }
            { { UI32Vector } { UIVector } { A vector whose components are \lref uint32_property_type UInt32 values. } }
            { { I64Vector } {  } { A vector whose components are \lref int64_property_type Int64 values. } }
            { { UI64Vector } {  } { A vector whose components are \lref uint64_property_type UInt64 values. } }
            { { I128Vector } {  } { A vector whose components are \lref int128_property_type Int128 values. } }
            { { UI128Vector } {  } { A vector whose components are \lref uint128_property_type UInt128 values. } }
            { { F32Vector } {  } { A vector whose components are \lref float32_property_type Float32 values. } }
            { { F64Vector } { Vector } { A vector whose components are \lref float64_property_type Float64 values. } }
            { { F128Vector } {  } { A vector whose components are \lref float128_property_type Float128 values. } }
            { { C32Vector } {  } { A vector whose components are \lref complex32_property_type Complex32 values. } }
            { { C64Vector } {  } { A vector whose components are \lref complex64_property_type Complex64 values. } }
            { { C128Vector } {  } { A vector whose components are \lref complex128_property_type Complex128 values. } }
         }

         Support for 128-bit integer and floating point vectors (I128Vector, UI128Vector, F128Vector and C128Vector) is \e optional. Support for the rest of 8-bit, 16-bit, 32-bit and 64-bit vector types is \e required for all XISF encoders and decoders claiming support for vector properties.
      }

      \subsection { \label matrix_property_types Matrix Property Types } {

         A matrix is a homogeneous, ordered set of scalars or complex numbers, structured as a two-dimensional array with a fixed number of rows and columns.

         \list {
            { The scalars or complex numbers contained in a matrix are \e {matrix elements}. }
            { The number of rows and columns in a matrix are the \e {matrix dimensions}. }
            { The total number of elements in a matrix is its \e length, which is equal to the product of its dimensions. }
            { An \e {empty matrix} is a matrix with zero length. }
            { A \e {matrix index} is an ordered pair of integers (\e{i},\e{j}), with \e i in the range \[0,N--1\] and j in the range \[0,M--1\], being N and M, respectively, the number of rows and columns in the matrix. }
            { A matrix element \e must be randomly accessible by its corresponding matrix index. }
            { There are no specific limits for the dimensions or the length of a matrix. }
            { When serialized in binary form, a matrix \e shall be stored as a contiguous sequence of matrix elements in \e {row order}: all matrix elements of the first row \e shall be stored by column order at consecutive locations, followed by all matrix elements of the second row, and so on. }
         }

         \table[caption,header,width:100\%] {
            { XISF Matrix Property Types }
            { \nowrap{ Type name } \nowrap{ Alternate name } { Description } }
            { { I8Matrix } {  } { A matrix whose elements are \lref int8_property_type Int8 values. } }
            { { UI8Matrix } { ByteMatrix } { A matrix whose elements are \lref uint8_property_type UInt8 values. } }
            { { I16Matrix } {  } { A matrix whose elements are \lref int16_property_type Int16 values. } }
            { { UI16Matrix } {  } { A matrix whose elements are \lref uint16_property_type UInt16 values. } }
            { { I32Matrix } { IMatrix } { A matrix whose elements are \lref int32_property_type Int32 values. } }
            { { UI32Matrix } { UIMatrix } { A matrix whose elements are \lref uint32_property_type UInt32 values. } }
            { { I64Matrix } {  } { A matrix whose elements are \lref int64_property_type Int64 values. } }
            { { UI64Matrix } {  } { A matrix whose elements are \lref uint64_property_type UInt64 values. } }
            { { I128Matrix } {  } { A matrix whose elements are \lref int128_property_type Int128 values. } }
            { { UI128Matrix } {  } { A matrix whose elements are \lref uint128_property_type UInt128 values. } }
            { { F32Matrix } {  } { A matrix whose elements are \lref float32_property_type Float32 values. } }
            { { F64Matrix } { Matrix } { A matrix whose elements are \lref float64_property_type Float64 values. } }
            { { F128Matrix } {  } { A matrix whose elements are \lref float128_property_type Float128 values. } }
            { { C32Matrix } {  } { A matrix whose elements are \lref complex32_property_type Complex32 values. } }
            { { C64Matrix } {  } { A matrix whose elements are \lref complex64_property_type Complex64 values. } }
            { { C128Matrix } {  } { A matrix whose elements are \lref complex128_property_type Complex128 values. } }
         }

         Support for 128-bit integer and floating point matrices (I128Matrix, UI128Matrix, F128Matrix and C128Matrix) is \e optional. Support for the rest of 8-bit, 16-bit, 32-bit and 64-bit matrix types is \e required for all XISF encoders and decoders claiming support for matrix properties.
      }

      \subsection { \label table_property_type Table Property Type } {

         An XISF table is a heterogeneous, ordered collection of XISF property values structured as a two-dimensional array with a fixed number of rows and columns. To formally define an XISF table object we need to define the properties of its structure and its data:

         \definition {
            { Table Structure }
            \list {
               { A \e {table field} is an association of an XISF \lref property_identifier {property identifier}, a \lref property_types {property type}, an \e optional \lref string_property_type String value known as \e header, and an \e optional \lref property_format_specifier {property format specifier}. }
               { A table field \e shall \e not be of table type. }
               { A \e {table structure} is an ordered sequence of table fields. }
               { Field property identifiers \e must be unique, i.e., two or more fields pertaining to the same table \e cannot have the same property identifier. }
               { A table structure cannot be empty, i.e., it \e must contain at least one table field. }
               { There are no specific limits for the maximum number of fields in a table structure. }
            }
         }

         \definition {
            { Table Data }
            \list {
               { Consider a table with M columns. The set of M columns \e must be completely defined by the table structure, which \e must have \e exactly M fields. }
               { A \e {table cell}, or \e {table element}, is a \lref property_value {property value} contained in a table at specific row and column coordinates. }
               { A table cell \e must be a valid property value of the type specified by the field corresponding to its column. }
               { A \e {table index} is an ordered pair of integers (\e{i},\e{j}), with \e i in the range \[0,N--1\] and j in the range \[0,M--1\], being N and M, respectively, the number of rows and columns in the table. }
               { A table cell \e must be randomly accessible by its corresponding table index. }
               { In a table with M columns, each table row is an ordered sequence of M table cells. }
               { In a table with N rows, the set of N table rows forms an ordered sequence of length N. }
               { The total number of table cells in a table of N rows and M columns is NxM. }
               { The value of an XISF table property is its entire set of table cells. }
               { An \e {empty table} is a table with zero rows. }
               { There are no specific limits for the maximum number of rows in a table. }
               { There are no specific limits for the maximum number of columns in a table. }
            }
         }

         In data disposition and access terms, an XISF table behaves like a matrix property. However, unlike a matrix, a table is an heterogeneous collection, so it can be used to store sequences of objects of different types.

         Table properties cannot be nested, that is, a table property cannot belong to or be serialized in a table property. Coherently with this restriction, as noted above, table fields \e shall \e not be of table type.

         For representations of an XISF table object, the headers defined in its structure, when available, \e should be used as column headers or titles to represent the table data as text in tabular form. The format specifiers defined in the table structure, when available, \e should be used to represent individual table cell values.

         Table properties allow generation of human-readable serializations with explicit declaration of data structures. These can be important features for some applications; however, parsing and decoding a table is much less efficient than processing a vector or matrix property, where the data are directly accessible in binary form. For the sake of performance, it is generally \e recommended to always consider using vectors and matrices instead of tables, and use tables only for applications where readability of serialized data and other table features are really important. For example, a \lref bytearray_property_type ByteArray property can be used as a generic container to transport arbitrary data structures.
      }
   }
}
