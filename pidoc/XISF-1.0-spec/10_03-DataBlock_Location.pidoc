
\subsection { \label data_block_location XISF Data Block Location } {

   The location---and, when necessary, also the \e {dimensions}---of an \lref data_block {XISF data block} \e must be completely defined in the \lref xisf_header {XISF header} of the \lref xisf_unit {XISF unit} where the block is serialized. The \c location XML attribute defines the location of an XISF data block and a number of related properties. The values of a \c location attribute can be:

   \definition {

      { \label inline_data_block \c { location="inline:\e{encoding}" } }
      {
         Defines an \e {inline XISF data block}. An inline data block is serialized in the character contents of an XML element, encoded as plain ASCII\ref unicode_ascii_subset text. \e\c encoding defines the data encoding used, which \e must be either \c base64 or \c hex, corresponding to the Base64 and Base16 (or hexadecimal) encodings,\ref rfc_4648 respectively. For data encoded in Base16, the digit symbols 'a', 'b', 'c', 'd', 'e' and 'f' \e shall be used to represent the nibble values 10\sub{10}, 11\sub{10}, 12\sub{10}, 13\sub{10}, 14\sub{10} and 15\sub{10}, respectively; in other words, a lowercase hexadecimal representation \e shall be used for Base16 encoding.

         Example of inline XISF data block:

         \code[lang:xml] { #:
<Property id="TestProperty" type="ByteArray" length="34" location="inline:base64">
   VGhpcyBpcyBhIHRlc3QgLSBURVNUIC0gMTIzNDU2Nzg5MA==
</Property>
         :# }

         Note that white space is irrelevant and \e must be ignored for Base64 and Base16 encoded data.

         XML elements serializing inline XISF data blocks \e shall \e not have child XML elements.
      }

      { \label embedded_data_block \c { location="embedded" } }
      {
         Defines an \e {embedded XISF data block}. An embedded block \e shall be serialized in the character contents of a child \c Data element, encoded as plain ASCII\ref unicode_ascii_subset text. The child \c Data element \e must have an \c encoding attribute, with the same meaning and rules as for \lref inline_data_block {inline data blocks}.

         Example of embedded XISF data block:

         \code[lang:xml] { #:
<Image geometry="6:6:3" sampleFormat="UInt8" colorSpace="RGB" location="embedded">
   <Data encoding="base64">
      AAAAAP8A/wD/AAAAAAAAAP8AAP8AAAAAAAAA/wD/AP8AAAAA/wD//wD/AP8AAP8A/wD//wD//
      wD//wD/AP8AAP8A/wD//wD/AP8AAAAAAAAA/wD/AP8AAAAAAAAAAP8A/wD/AAAAAAAAAP8A
   </Data>
</Image>
         :# }

         Note that white space is irrelevant and \e must be ignored for Base64 and Base16 encoded data.

         The child \c Data element serializing an embedded data block \e shall \e not have child elements or additional character data contents.

         Embedded data blocks are necessary for blocks that have to be serialized within XML elements that can have child elements or character data contents. In these cases an inline serialization is \e forbidden by this specification.
      }

      \c { \label attachment_data_block location="attachment:\e{position}:\e{size}" }
      {
         Defines an \e {attached XISF data block} in a \lref monolithic_xisf_file {monolithic XISF file}. \c\e position and \c\e size \e must be plain text representations of unsigned integers. The value of \c\e position is the byte position of the first byte of the XISF data block from the beginning of the monolithic XISF file where it is stored. The value of \c\e size is the size in bytes of the XISF data block.

         Example of attached XISF data block:

         \code[lang:xml] { #:
<Image geometry="960:540:3" sampleFormat="Float32" bounds="0:1" colorSpace="RGB"
                  location="attachment:4096:6220800" />
         :# }
      }

      \c { \label url_data_block location="url(\e{URL})"\n
           location="url(\e{URL}):\e{index-id}" }
      {
         Defines an \e {external XISF data block} in a \lref distributed_xisf_unit {distributed XISF unit}.

         \c\e URL \e must be a valid \e {uniform resource locator}\ref rfc_3986 specification for a local or remote file where the XISF data block should be available.

         In the first form, the data block \e shall start at byte position zero of the specified file, and its size in bytes \e must be the total size of the specified file, whose value \e must be retrievable by some means that are beyond the scope of this specification; for example, by reading the properties of a local directory entry, or by fetching the total length of the data downloaded from a remote server.

         In the second form, the specified file \e must be an \lref data_blocks_file {XISF data blocks file}. \c\e index-id \e must be a plain text representation of an unsigned integer, whose value \e must be the unique identifier of a \lref block_index_element {block index element} in the XISF data blocks file. \c\e index-id \e should be represented as an hexadecimal number. The referenced block index element \e must define the position and size of the XISF data block being located.

         Example of external XISF data block stored on a remote server:

         \code[lang:xml] { #:
<Image geometry="4096:4096:1" sampleFormat="UInt16"
                  location="url(http://mysite.example.com/myfile.bin)" />
         :# }

         Example of XISF data block stored in an XISF data blocks file:

         \code[lang:xml] { #:
<Property id="AHugeOne" type="F32Matrix" rows="100000" columns="25000"
                  location="url(file:///data/huge-things.xisb):0x7a73526b584c6167" />
         :# }

         Parentheses appearing in a URL \e must be written as XML character or entity references,\ref xml_references so that the resulting \c location attribute value can be parsed correctly. For example:

         \code[lang:xml] { #:
         <Property id="FooMatrix" type="Matrix" rows="12345" columns="54321"
                  location="url(ftp://ftp.example.com/public/example&#40;2016&#41;.dat)" />
         :# }

         In the above example the file name being referenced is \c "example(2016).dat".
      }

      \c { \label absolute_path_data_block location="path(\e{abs-file-path})"\n
           location="path(\e{abs-file-path}):\e{index-id}" }
      {
         Defines an external XISF data block stored in a local file with an \e {absolute file path specification}.

         \c\e {abs-file-path} is an absolute path\ref open_group_posix_absolute_pathname to a file located on, or accessible from, the local file system. File path specifications \e shall follow standard UNIX pathname syntax rules\ref open_group_posix_pathname and pathname resolution\ref open_group_posix_pathname_resolution on all platforms. In particular, \e only slash characters ('/', ASCII code point 47\sub{10} = 2F\sub{16}) \e shall be used as directory separators.

         In the first form, the data block \e shall start at byte position zero of the specified file, and its size in bytes \e must be the total size of the file, whose value \e must be retrievable by some means that are beyond the scope of this specification; for example, by reading the properties of a local directory entry.

         In the second form, the specified file \e must be an \lref data_blocks_file {XISF data blocks file}. \c\e index-id \e must be a plain text representation of an unsigned integer, whose value \e must be the unique identifier of a \lref block_index_element {block index element} in the XISF data blocks file. \c\e index-id \e should be represented as an hexadecimal number. The referenced block index element \e must define the position and size of the XISF data block being located.

         In general, absolute paths are \e not \e recommended and \e should be avoided, since they tend to prevent \lref distributed_xisf_unit {distributed XISF units} from being relocatable. If a unit with absolute path names is moved or copied to a different file system or machine, it will cease to be valid unless the original directory tree exists on the target file system.

         In some special cases, however, absolute paths can be useful. For example, a virtualized file system can be based on absolute paths to symbolic links\ref open_group_posix_symbolic_link pointing to actual directories. In this case a \lref distributed_xisf_unit {distributed XISF unit} with absolute paths to external resources can be made relocatable by emulating the required directory tree structure through symbolic links on the deployment file system.

         Parentheses appearing in a path specification \e must be written as XML character or entity references,\ref xml_references so that the resulting \c location attribute value can be parsed correctly. For example:

         \code[lang:xml] { #:
<Property id="DescriptionDocument" type="String"
                  location="path(/Documents/description&#40;draft&#41;.txt)" />
         :# }
      }

      \c { \label relative_path_data_block location="path(@header_dir/\e{rel-file-path})"\n
           location="path(@header_dir/\e{rel-file-path}):\e{index-id}" }
      {
         Defines an external XISF data block stored in a local file with a \e {relative directory path specification}.

         \c\e {rel-file-path} is a path to a file, relative\ref open_group_posix_relative_pathname to the directory where the file containing the XISF header is located on, or accessible from, the local file system. Directory path specifications \e shall follow standard UNIX pathname syntax rules\ref open_group_posix_pathname and pathname resolution\ref open_group_posix_pathname_resolution on all platforms. In particular, \e only slash characters ('/', ASCII code point 47\sub{10} = 2F\sub{16}) \e shall be used as directory separators.

         In the first form, the data block \e shall start at byte position zero of the specified file, and its size in bytes \e must be the total size of the file, whose value \e must be retrievable by some means that are beyond the scope of this specification; for example, by reading the properties of a local directory entry.

         In the second form, the specified file \e must be an \lref data_blocks_file {XISF data blocks file}. \c\e index-id \e must be a plain text representation of an unsigned integer, whose value \e must be the unique identifier of a \lref block_index_element {block index element} in the XISF data blocks file. \c\e index-id \e should be represented as an hexadecimal number. The referenced block index element \e must define the position and size of the XISF data block being located.

         The following \c Image element shows an example of XISF data block located with a relative directory specification. The \c sample-screenshots.xisb data blocks file should be on the same directory as the XISF header file being decoded:

         \code[lang:xml] { #:
<Image geometry="1024:768:3" sampleFormat="UInt8" colorSpace="RGB"
                  location="path(@header_dir/sample-screenshots.xisb):0x4d373e33756e480f" />
         :# }

         The following example assumes that an \c astrometry sub-directory exists on the local directory represented by \c @header_dir:

         \code[lang:xml] { #:
<Property id="AstrometricSolution" type="F64Matrix" rows="428" columns="16"
                  location="path(@header_dir/astrometry/solution.dat)" />
         :# }

         As happens with absolute path locations, parentheses appearing in a relative path specification \e must be written as XML character or entity references,\ref xml_references so that the resulting \c location attribute value can be parsed correctly:

         \code[lang:xml] { #:
<Property id="DescriptionDocument" type="String"
                  location="path(@header_dir/description&#40;draft&#41;.txt)" />
         :# }

         Relative file paths are the best option to build relocatable \lref distributed_xisf_unit {distributed XISF units}. A distributed unit that locates all of its external data blocks through relative paths can be transferred to any location on any file system, including multiple machines, without breaking its validity. This can't be ensured for blocks located by absolute paths.
      }
   }
}

\subsection { \label data_block_byte_order XISF Data Block Byte Order } {

   XML elements serializing \lref data_block {XISF data blocks} \e may, with the only exception of ICC color profiles as described below, include a \c byteOrder attribute to specify the byte order, or \e endianness, of the serialized data.

   The \c byteOrder attribute \e shall \e not be present in \lref iccprofile_core_element \c ICCProfile core elements. The ICC color profile specification\ref icc_profile \ref iso_15076_1 requires big-endian encoding for ICC profile structures, which \e must be serialized unaltered in XISF units.

   For the rest of core elements, the \c byteOrder attribute is \e optional. When it is not specified, the little-endian encoding \e shall be assumed by default.

   Endianness is immaterial for data blocks consisting of sequences of single bytes without structuration into words or multiple-byte ordered subsequences. For such blocks the \c byteOrder attribute is unnecessary and \e should \e not be used. For example, an element serializing a String property as a data block does not need and should not include a \c byteOrder attribute, since \lref string_property_type \c String property values are necessarily encoded in UTF-8. The same applies to elements serializing \lref i8vector_property_type  I8Vector, \lref bytearray_property_type ByteArray, \lref i8matrix_property_type I8Matrix, and \lref bytematrix_property_type ByteMatrix properties.

   The syntax of the \c byteOrder attribute is the following:

   \definition {

      \c { byteOrder="\e{endianness}" }
      {
         where \c\e endianness \e must be one of:

         \definition {

            \c big
            {
               The serialized block is encoded in big-endian byte order.
            }

            \c little
            {
               The serialized block is encoded in little-endian byte order. Note that this attribute value is included for completeness. Its use is normally unnecessary because data blocks are always encoded as little-endian by default in XISF units (with the exception of ICC color profiles, wich are always big-endian, as described above).
            }
         }
      }
   }

   Example:

   \code[lang:xml] { #:
<Image geometry="4096:4096:1" sampleFormat="Float32" bounds="0:1"
       location="attached:134217728:67108864"
       byteOrder="big" />
   :# }
}
