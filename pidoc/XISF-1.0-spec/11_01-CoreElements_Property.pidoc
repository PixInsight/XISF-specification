
\subsection { \label property_core_element \c Property Core Element } {

   The \c Property core element has the following properties:

   \list {

      { A \c Property element \e shall serialize an \lref xisf_property {XISF property}. }

      { An \lref xisf_header {XISF header} \e may contain multiple \c Property core elements. }

      { A \c Property element \e may be a child element of a \lref metadata_core_element \c Metadata core element to serialize a property of the \lref xisf_unit {XISF unit}. }

      { A \c Property element \e may be a child element of an \lref image_core_element \c Image core element to serialize a property of an \lref xisf_image {XISF image}. }

      { A \c Property element \e may be a child element of the unique \lref root_element {XISF root element} to serialize a standalone property. }

      { A \c Property element can be associated with \c Metadata or \c Image core elements by means of a \c uid attribute and child \lref reference_core_element \c Reference elements. }
   }

   \subsection { \c Property Attributes Required for All Properties } {

      Every \c Property element \e shall have the following attributes:

      \definition {

         \c { id="\e{property-id}" }
         {
            where \c\e property-id \e is a valid \lref property_identifier {XISF property identifier}, which \e shall be the identifier of the \lref xisf_property {XISF property} being serialized.
         }

         \c { type="\e{property-type}" }
         {
            where \c\e property-type \e is the name of an \lref property_types {XISF property type}, which \e shall be the data type of the XISF property being serialized.
         }
      }
   }

   \subsection { \c Property \c format Attribute } {

      A \c Property element \e may have an optional \c format attribute:

      \definition {

         \c { format="\e{property-format-spec}" }
         {
            where \c\e property-format-spec is a valid \lref property_format_specifier {XISF property format specifier} for the XISF property being serialized.
         }
      }

      Examples:

      \code[lang:xml] { #:
<Property id="FocalDistance" type="UInt32" value="2540" format="width:8;align:center" />
<Property id="Magnitude" type="Float32" value="1.25"
                                 format="width:6;precision:2;float:fixed;sign:force" />
<Property id="Flags" type="UInt16" value="0xff39" format="width:8;base:hex;fill:." />
<Property id="Coefficients" type="Vector64" length="1234"
                                 location="attachment:4096:9872" format="width:10;precision:3" />
      :# }

      These examples would generate the following plain text representations:

      \verbatim {
"  2540  "
" +1.25"
"....ff39"
"      32.1, -1.24e-08" }

      In the last example, note that the \c {float:auto} format token is implicitly being used by default. Only the first two vector components are shown, and in this example we assume that the decoder application is representing vectors as comma-separated lists of components, which is not part of this specification and hence is not mandatory.

      XISF decoders supporting property format specifiers \e should apply them, as appropriate, to generate plain text representations of scalar values. This includes all \lref scalar_property_types {scalar property types}, the components of \lref complex_property_types {complex properties}, \lref string_property_type {string properties} (where only \c width and \c align format tokens should be taken into account), the components of \lref vector_property_types {vector properties}, and the elements of \lref matrix_property_types {matrix properties}.
   }

   \subsection { Serialization of Scalar Properties } {

      A \c Property element serializing a \lref scalar_property_types {scalar XISF property} \e shall have a \c value attribute, whose value \e shall be a valid \lref scalars_serializations {plain text serialization} of the property value. Typically, in these cases the \c Property element is an empty XML element.

      Examples:

      \code[lang:xml] { #:
<Property id="HasData" type="Boolean" value="1" />
<Property id="Flags" type="UInt32" value="0x8000FFA0" />
<Property id="Volume" type="Float64" value="1.1234e+04" />
      :# }
   }

   \subsection { Serialization of Complex Properties } {

      A \c Property element serializing a \lref complex32_property_type Complex32 or \lref complex64_property_type Complex64 property \e shall have a \c value attribute, whose value \e shall serialize the value of the XISF property as follows:

      \definition {

         \c { value="(\e{real},\e{imag})" }
         {
            where \c\e real and \c\e imag are, respectively, \lref floating_point_serializations {plain text representations} of the floating point real and imaginary parts of the complex number. Typically, in these cases the \c Property element is an empty XML element.
         }
      }

      Example:

      \code[lang:xml] { #:
<Property id="PeakElement" type="Complex32" value="(0.123,-0.735e-02)" />
      :# }
   }

   \subsection { Serialization of String Properties } {

      A \c Property element serializing a \lref string_property_type String property \e shall \e not have a \c value attribute, and \e must serialize the property value either directly in its character data contents, or as an \lref data_block {XISF data block}.

      Examples:

      \code[lang:xml] { #:
<Property id="XISF:BriefDescription" type="String">Definitely one of my very best images.</Property>
<Property id="ALongString" type="String" location="attached:17600:8192" />
<Property id="AnEncodedString" type="String"
                  location="inline:base64">VGhlIHF1aWNrIGJyb3duIGZveA==</Property>
<Property id="AnExternalDocument" type="String"
                  location="url(http://mysite.example.com/MyTextDocument.txt)" />
      :# }

      When a string is serialized unencoded directly in the character contents of a \c Property element, keep in mind that all of the white space between the starting and ending tags \e is significant and a compliant decoder \e must preserve it. To prevent unwanted leading and trailing spaces, the \c Property element \e should be generated as a single text line in these cases.
   }

   \subsection { Serialization of TimePoint Properties } {

      A \c Property element serializing a \lref time_point_property_type TimePoint property \e shall have a \c value attribute, whose value \e shall be the plain text representation of the TimePoint value. Typically, in these cases the \c Property element is an empty XML element.

      Examples:

      \code[lang:xml] { #:
<Property id="CreationTime" type="TimePoint" value="2014-12-01T18:07:54Z" />
<Property id="Observation:StartTime" type="TimePoint" value="2015-01-23T19:52:31.46Z" />
      :# }

      White space is irrelevant in a TimePoint serialization, so it \e should \e not be generated by encoders and \e must be ignored by decoders.
   }

   \subsection { Serialization of Vector Properties } {

      A \c Property element serializing a \lref vector_property_types vector property:

      \list {
         { \e Shall \e not have a \c value attribute. }
         { \e Shall have a \c length attribute. The value of the \c length attribute \e must be a plain text representation of an unsigned integer, whose value \e must be the vector length, that is, the number of components in the vector. }
         { \e Shall serialize the value of the XISF property as an \lref data_block {XISF data block}. }
      }

      Example:

      \code[lang:xml] { #:
<Property id="TestProperty" type="ByteArray" length="34" location="inline:base64">
   VGhpcyBpcyBhIHRlc3QgLSBURVNUIC0gMTIzNDU2Nzg5MA==
</Property>
      :# }
   }

   \subsection { Serialization of Matrix Properties } {

      A \c Property element serializing a \lref matrix_property_types matrix property:

      \list {
         { \e Shall \e not have a \c value attribute. }
         { \e Shall have a \c rows attribute. The value of the \c rows attribute \e must be a plain text representation of an unsigned integer, whose value \e must be the number of rows in the matrix. }
         { \e Shall have a \c columns attribute. The value of the \c columns attribute \e must be a plain text representation of an unsigned integer, whose value \e must be the number of columns in the matrix. }
         { \e Shall serialize the value of the XISF property as an \lref data_block {XISF data block}. }
      }

      Example:

      \code[lang:xml] { #:
<Property id="AstrometricSolution" type="F64Matrix" rows="428" columns="16"
                           location="path(@header_dir/astrometry/solution.dat)" />
      :# }
   }
}
