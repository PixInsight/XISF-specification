
\subsection { \label monolithic_xisf_file Monolithic XISF File } {

   A monolithic XISF file \e shall have the following structure:

   \definition {

      { Signature }
      {
         A sequence of eight contiguous bytes whose values \e must form the set \c 'XISF0100' of ASCII characters,\ref unicode_ascii_subset that is, the sequence 88\sub{10} 73\sub{10} 83\sub{10} 70\sub{10} 48\sub{10} 49\sub{10} 48\sub{10} 48\sub{10} of unsigned 8-bit integers.
      }

      { Header length }
      {
         An unsigned 32-bit integer whose value \e must be the length in bytes of the \lref xisf_header {XISF header}.
      }

      { Reserved field }
      {
         Four contiguous bytes reserved for future use. The values of these bytes \e shall be zero.
      }

      { XISF header }
      {
         The unique \lref xisf_header {XISF header} of the \lref xisf_unit {XISF unit}.
      }

      { Unused space (\e optional) }
      {
         A sequence of zero or more contiguous bytes that \e may exist immediately after the XISF header. The bytes in an unused space \e must be zero.
      }

      { Attached XISF data blocks (\e optional) }
      {
         Zero or more \lref attached_data_block {attached XISF data blocks} that \e may exist, either immediately after the XISF header, or after the optional unused space if it exists. Each attached data block is a sequence of one or more contiguous bytes. Attached data blocks \e may be separated by unused space, with the same definition as above.
      }
   }

   Figure \figref fig_monolithic_XISF_file_structure shows a graphical representation of a monolithic XISF file. An XISF decoder or a file management application can use the XISF signature (the first eight bytes of the file) to quickly determine if a given file can be a valid monolithic XISF file. The header length field has the advantage that an XISF decoder can load the entire XISF header in memory using a single file read operation. Without the header length element, a decoder would have to read the XML document sequentially in order to find the end of the XISF header. Unused spaces can be useful to optimize I/O buffering and access to attached data blocks in some devices.

   \vs[length:2em]

   \figure[numbered:fig_monolithic_XISF_file_structure] {

      \figtag \s { Structure of a monolithic XISF file. }

      \vs[length:2em]

      \center \image[width:48.74em] { monolithic-XISF-file-structure.svg }
   }

   \vs[length:2em]

   The following C++ code snippet shows a practical implementation of a structure to represent the initial components of a monolithic XISF file, including construction and validation.

   \code[import] XISFMonolithicFileHeader.cpp
}
